{
  "version": 3,
  "sources": ["src/content/index.ts"],
  "sourcesContent": [
    "// Content script for Quick VRT Extension (TypeScript version)\n\nclass QuickVRTContent {\n  private originalScrollBehavior: string | null = null;\n\n  constructor() {\n    this.init();\n  }\n\n  private init(): void {\n    this.setupMessageListener();\n  }\n\n  private setupMessageListener(): void {\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      this.handleMessage(message, sender, sendResponse);\n      return true; // 非同期レスポンスを有効にする\n    });\n  }\n\n  private async handleMessage(message: any, sender: any, sendResponse: (response: any) => void): Promise<void> {\n    try {\n      switch (message.type) {\n        case 'PREPARE_FOR_CAPTURE':\n          await this.prepareForCapture(message.options);\n          sendResponse({ success: true });\n          break;\n\n        case 'SCROLL_TO_TOP':\n          this.scrollToTop();\n          sendResponse({ success: true });\n          break;\n\n        case 'SCROLL_TO_BOTTOM':\n          await this.scrollToBottom();\n          sendResponse({ success: true });\n          break;\n\n        case 'GET_PAGE_INFO':\n          const pageInfo = this.getPageInfo();\n          sendResponse({ success: true, data: pageInfo });\n          break;\n\n        case 'DISABLE_ANIMATIONS':\n          this.disableAnimations();\n          sendResponse({ success: true });\n          break;\n\n        case 'RESTORE_PAGE':\n          this.restorePage();\n          sendResponse({ success: true });\n          break;\n\n        default:\n          sendResponse({ success: false, error: 'Unknown message type' });\n      }\n    } catch (error) {\n      console.error('Content script メッセージ処理エラー:', error);\n      sendResponse({ success: false, error: (error as Error).message });\n    }\n  }\n\n  // キャプチャの準備\n  private async prepareForCapture(options: any = {}): Promise<void> {\n    try {\n      // ページの安定化のための処理\n      if (options.disableAnimations) {\n        this.disableAnimations();\n      }\n\n      // スクロール処理\n      if (options.autoScroll) {\n        await this.performFullPageScroll();\n      } else {\n        // 基本的には最上部にスクロール\n        this.scrollToTop();\n      }\n\n      // 画像の読み込み待機\n      if (options.waitForImages) {\n        await this.waitForImages();\n      }\n\n      // 追加の安定化待機\n      const delay = options.stabilizationDelay || 500;\n      await new Promise(resolve => setTimeout(resolve, delay));\n\n    } catch (error) {\n      console.error('キャプチャ準備エラー:', error);\n      throw error;\n    }\n  }\n\n  // ページ情報の取得\n  private getPageInfo(): any {\n    return {\n      url: window.location.href,\n      title: document.title,\n      scrollHeight: document.documentElement.scrollHeight,\n      scrollWidth: document.documentElement.scrollWidth,\n      viewport: {\n        width: window.innerWidth,\n        height: window.innerHeight\n      },\n      hasLazyImages: this.hasLazyLoadingImages(),\n      hasAnimations: this.hasAnimations()\n    };\n  }\n\n  // 最上部へのスクロール\n  private scrollToTop(): void {\n    window.scrollTo({ top: 0, left: 0, behavior: 'auto' });\n  }\n\n  // 最下部への段階的スクロール\n  private async scrollToBottom(delay: number = 300): Promise<void> {\n    const scrollHeight = document.documentElement.scrollHeight;\n    const viewportHeight = window.innerHeight;\n    let currentPosition = 0;\n\n    while (currentPosition < scrollHeight) {\n      currentPosition += viewportHeight;\n      window.scrollTo({ top: currentPosition, behavior: 'auto' });\n      \n      // 各スクロール後に遅延\n      await new Promise(resolve => setTimeout(resolve, delay));\n      \n      // 新しいコンテンツが読み込まれた場合の対応\n      const newScrollHeight = document.documentElement.scrollHeight;\n      if (newScrollHeight > scrollHeight) {\n        break; // 無限スクロールなどの場合\n      }\n    }\n\n    // 最終的に最上部に戻る\n    this.scrollToTop();\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n\n  // フルページスクロール（lazy loading対応）\n  private async performFullPageScroll(): Promise<void> {\n    try {\n      const initialHeight = document.documentElement.scrollHeight;\n      \n      // 段階的にスクロールして lazy loading をトリガー\n      await this.scrollToBottom(200);\n      \n      // lazy loading画像の読み込み待機\n      await this.triggerLazyLoading();\n      \n      // 最終的に最上部に戻す\n      this.scrollToTop();\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n    } catch (error) {\n      console.error('フルページスクロールエラー:', error);\n      this.scrollToTop(); // エラー時も最上部に戻す\n    }\n  }\n\n  // Lazy loading のトリガー\n  private async triggerLazyLoading(): Promise<void> {\n    // 一般的なlazy loadingのセレクタ\n    const lazySelectors = [\n      'img[data-src]',\n      'img[data-srcset]',\n      'img[loading=\"lazy\"]',\n      'picture[data-src]',\n      'source[data-srcset]',\n      '[data-bg]',\n      '[data-background]',\n      '[data-background-image]',\n      '.lazy',\n      '.lazyload',\n      '.lazy-load'\n    ];\n\n    // lazy loading要素を強制的に読み込み\n    lazySelectors.forEach(selector => {\n      const elements = document.querySelectorAll(selector);\n      elements.forEach(el => {\n        const element = el as HTMLElement;\n        const imgElement = el as HTMLImageElement;\n        \n        // data-src を src に移動\n        if (element.dataset.src && !imgElement.src) {\n          imgElement.src = element.dataset.src;\n        }\n        if (element.dataset.srcset && !imgElement.srcset) {\n          imgElement.srcset = element.dataset.srcset;\n        }\n        // loading属性を変更\n        if (imgElement.loading === 'lazy') {\n          imgElement.loading = 'eager';\n        }\n        // backgroundImageの処理\n        const bgSrc = element.dataset.bg || element.dataset.background || element.dataset.backgroundImage;\n        if (bgSrc) {\n          element.style.backgroundImage = `url(${bgSrc})`;\n        }\n      });\n    });\n\n    // Intersection Observer APIを使用しているlazy loadingの場合\n    // 全ての要素を一度ビューポートに入れる\n    const lazyElements = document.querySelectorAll(lazySelectors.join(','));\n    lazyElements.forEach(element => {\n      // 要素を一時的に表示領域に入れる\n      element.scrollIntoView({ behavior: 'auto', block: 'center' });\n    });\n\n    // 画像読み込みを待機\n    await this.waitForImages(3000); // 3秒でタイムアウト\n  }\n\n  // 画像読み込みの待機\n  private async waitForImages(timeout: number = 5000): Promise<void> {\n    const images = Array.from(document.images).filter(img => !img.complete);\n    \n    if (images.length === 0) {\n      return; // すべての画像が読み込み済み\n    }\n\n    return new Promise((resolve) => {\n      let loadedCount = 0;\n      const totalImages = images.length;\n      const timeoutId = setTimeout(resolve, timeout);\n\n      const onImageLoad = () => {\n        loadedCount++;\n        if (loadedCount >= totalImages) {\n          clearTimeout(timeoutId);\n          resolve();\n        }\n      };\n\n      images.forEach(img => {\n        if (img.complete) {\n          onImageLoad();\n        } else {\n          img.addEventListener('load', onImageLoad, { once: true });\n          img.addEventListener('error', onImageLoad, { once: true });\n        }\n      });\n    });\n  }\n\n  // アニメーションの無効化\n  private disableAnimations(): void {\n    // CSS animationsとtransitionsを無効化\n    const style = document.createElement('style');\n    style.id = 'quick-vrt-disable-animations';\n    style.innerHTML = `\n      *, *::before, *::after {\n        animation-duration: 0s !important;\n        animation-delay: 0s !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0s !important;\n        transition-delay: 0s !important;\n        transition-property: none !important;\n      }\n      \n      /* 一般的なアニメーションライブラリのクラスを無効化 */\n      .animate__animated,\n      .animated,\n      [class*=\"animate-\"],\n      [class*=\"fade\"],\n      [class*=\"slide\"],\n      [class*=\"bounce\"],\n      [class*=\"zoom\"],\n      [class*=\"rotate\"],\n      [class*=\"flip\"] {\n        animation: none !important;\n        transition: none !important;\n      }\n    `;\n    \n    document.head.appendChild(style);\n\n    // JavaScript animationsの無効化\n    this.disableJavaScriptAnimations();\n    \n    // スムーススクロールの無効化\n    this.originalScrollBehavior = document.documentElement.style.scrollBehavior;\n    document.documentElement.style.scrollBehavior = 'auto';\n  }\n\n  // JavaScriptアニメーションの無効化\n  private disableJavaScriptAnimations(): void {\n    // requestAnimationFrame を即座に実行するように変更\n    const originalRAF = window.requestAnimationFrame;\n    window.requestAnimationFrame = function(callback: FrameRequestCallback): number {\n      return setTimeout(callback, 0);\n    };\n\n    // setTimeout/setInterval の短い遅延を0に変更\n    const originalSetTimeout = window.setTimeout;\n    window.setTimeout = function(callback: (...args: any[]) => void, delay?: number, ...args: any[]): number {\n      const newDelay = (delay && delay < 100) ? 0 : delay;\n      return originalSetTimeout(callback, newDelay, ...args);\n    };\n\n    // 一般的なアニメーションライブラリを無効化\n    this.disableAnimationLibraries();\n  }\n\n  // アニメーションライブラリの無効化\n  private disableAnimationLibraries(): void {\n    // jQuery animations\n    const $ = (window as any).jQuery || (window as any).$;\n    if ($) {\n      if ($.fx) {\n        $.fx.off = true;\n      }\n    }\n\n    // GSAP\n    const gsap = (window as any).gsap;\n    if (gsap) {\n      try {\n        gsap.globalTimeline.pause();\n      } catch (e) {\n        console.warn('GSAP制御エラー:', e);\n      }\n    }\n\n    // Anime.js\n    const anime = (window as any).anime;\n    if (anime && anime.running) {\n      try {\n        anime.running.forEach((anim: any) => anim.pause());\n      } catch (e) {\n        console.warn('Anime.js制御エラー:', e);\n      }\n    }\n\n    // Velocity.js\n    const Velocity = (window as any).Velocity;\n    if (Velocity) {\n      try {\n        Velocity.mock = true;\n      } catch (e) {\n        console.warn('Velocity.js制御エラー:', e);\n      }\n    }\n  }\n\n  // ページの復元\n  private restorePage(): void {\n    // アニメーション無効化スタイルの削除\n    const style = document.getElementById('quick-vrt-disable-animations');\n    if (style) {\n      style.remove();\n    }\n\n    // スクロール動作の復元\n    if (this.originalScrollBehavior !== null) {\n      document.documentElement.style.scrollBehavior = this.originalScrollBehavior;\n    }\n\n    // 最上部にスクロール\n    this.scrollToTop();\n  }\n\n  // lazy loading画像の存在チェック\n  private hasLazyLoadingImages(): boolean {\n    const lazySelectors = [\n      'img[data-src]',\n      'img[data-srcset]',\n      'img[loading=\"lazy\"]',\n      '.lazy',\n      '.lazyload'\n    ];\n    \n    return lazySelectors.some(selector => \n      document.querySelector(selector) !== null\n    );\n  }\n\n  // アニメーションの存在チェック\n  private hasAnimations(): boolean {\n    // CSS animationsのチェック\n    const animatedElements = document.querySelectorAll('[class*=\"animate\"], [class*=\"animation\"], .animated');\n    if (animatedElements.length > 0) {\n      return true;\n    }\n\n    // CSS transitions/animations の計算スタイルをチェック\n    const elements = document.querySelectorAll('*');\n    for (let i = 0; i < Math.min(elements.length, 50); i++) { // パフォーマンス考慮で最初の50要素のみ\n      const computedStyle = window.getComputedStyle(elements[i]);\n      if (computedStyle.animationDuration !== '0s' || \n          computedStyle.transitionDuration !== '0s') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // ページの安定性チェック\n  private async waitForPageStability(timeout: number = 3000): Promise<void> {\n    return new Promise((resolve) => {\n      let stabilityTimer: number;\n      let lastHeight = document.documentElement.scrollHeight;\n      let stableCount = 0;\n      const requiredStableCount = 5; // 5回連続で変化なしなら安定とみなす\n\n      const checkStability = () => {\n        const currentHeight = document.documentElement.scrollHeight;\n        if (currentHeight === lastHeight) {\n          stableCount++;\n          if (stableCount >= requiredStableCount) {\n            clearInterval(stabilityTimer);\n            resolve();\n          }\n        } else {\n          stableCount = 0;\n          lastHeight = currentHeight;\n        }\n      };\n\n      stabilityTimer = setInterval(checkStability, 200) as unknown as number;\n      \n      // タイムアウト処理\n      setTimeout(() => {\n        clearInterval(stabilityTimer);\n        resolve();\n      }, timeout);\n    });\n  }\n}\n\n// Content scriptの初期化\nif (typeof window !== 'undefined') {\n  new QuickVRTContent();\n}"
  ],
  "mappings": "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",
  "debugId": "A94147832FCD3B4464756E2164756E21",
  "names": []
}