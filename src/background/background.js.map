{
  "version": 3,
  "sources": ["src/background/index.ts"],
  "sourcesContent": [
    "// Background script for Quick VRT Extension (Preact version)\n\nclass QuickVRTBackground {\n  private capturedData: {\n    before?: any;\n    after?: any;\n  } = {};\n\n  constructor() {\n    this.init();\n  }\n\n  private init(): void {\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    // 拡張機能インストール時の処理\n    chrome.runtime.onInstalled.addListener((details) => {\n      if (details.reason === 'install') {\n        console.log('Quick VRT Extension がインストールされました');\n        this.initializeStorage();\n      } else if (details.reason === 'update') {\n        console.log('Quick VRT Extension がアップデートされました');\n        this.handleUpdate(details.previousVersion || '');\n      }\n    });\n\n    // メッセージハンドリング\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      this.handleMessage(message, sender, sendResponse);\n      return true; // 非同期レスポンスを有効にする\n    });\n\n    // タブの変更を監視\n    chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n      if (changeInfo.status === 'complete') {\n        this.handleTabUpdate(tabId, tab);\n      }\n    });\n\n    // 拡張機能アイコンのクリック処理を追加\n    chrome.action.onClicked.addListener((tab) => {\n      this.openExtensionInTab();\n    });\n\n    // コンテキストメニューの作成\n    chrome.contextMenus.onClicked.addListener((info, tab) => {\n      this.handleContextMenuClick(info, tab);\n    });\n\n    this.createContextMenus();\n  }\n\n  // 拡張機能を新しいタブで開く\n  private async openExtensionInTab(): Promise<void> {\n    const extensionUrl = chrome.runtime.getURL('popup.html');\n    await chrome.tabs.create({ url: extensionUrl });\n  }\n\n  // ストレージの初期化\n  private async initializeStorage(): Promise<void> {\n    try {\n      // デフォルト設定の設定\n      const defaultSettings = {\n        captureDelay: 1,\n        imageQuality: 'medium',\n        autoScroll: false,\n        diffThreshold: 0.1,\n        diffColor: '#ff0000'\n      };\n\n      await chrome.storage.local.set({\n        vrtSettings: defaultSettings,\n        vrtHistory: []\n      });\n\n      console.log('ストレージが初期化されました');\n    } catch (error) {\n      console.error('ストレージ初期化エラー:', error);\n    }\n  }\n\n  // アップデート処理\n  private async handleUpdate(previousVersion: string): Promise<void> {\n    try {\n      // バージョン間での互換性処理\n      const result = await chrome.storage.local.get(['vrtSettings', 'vrtHistory']);\n      \n      // 既存の設定がない場合は初期化\n      if (!result.vrtSettings) {\n        await this.initializeStorage();\n      }\n\n      console.log(`v${previousVersion} から更新されました`);\n    } catch (error) {\n      console.error('アップデート処理エラー:', error);\n    }\n  }\n\n  // メッセージハンドリング\n  private async handleMessage(message: any, sender: any, sendResponse: (response: any) => void): Promise<void> {\n    try {\n      switch (message.type) {\n        case 'CAPTURE_SCREENSHOT':\n          const screenshot = await this.captureScreenshot(message.options);\n          sendResponse({ success: true, data: screenshot });\n          break;\n\n        case 'CAPTURE_SCREENSHOT_TAB':\n          // 特定のタブIDでスクリーンショットを撮影\n          const tabScreenshot = await this.captureScreenshotFromTab(message.tabId, message.options);\n          sendResponse({ success: true, data: tabScreenshot });\n          break;\n\n        case 'STORE_CAPTURE':\n          // キャプチャデータを一時保存\n          if (message.captureType === 'before') {\n            this.capturedData.before = message.data;\n          } else {\n            this.capturedData.after = message.data;\n          }\n          sendResponse({ success: true });\n          break;\n\n        case 'GET_STORED_CAPTURES':\n          // 保存されたキャプチャデータを取得\n          sendResponse({ success: true, data: this.capturedData });\n          break;\n\n        case 'CLEAR_STORED_CAPTURES':\n          // キャプチャデータをクリア\n          this.capturedData = {};\n          sendResponse({ success: true });\n          break;\n\n        case 'GET_TAB_INFO':\n          const tabInfo = await this.getTabInfo(message.tabId);\n          sendResponse({ success: true, data: tabInfo });\n          break;\n\n        case 'GET_ALL_TABS':\n          const tabs = await chrome.tabs.query({});\n          sendResponse({ success: true, data: tabs });\n          break;\n\n        case 'OPEN_IN_TAB':\n          await this.openExtensionInTab();\n          sendResponse({ success: true });\n          break;\n\n        case 'INJECT_CONTENT_SCRIPT':\n          await this.injectContentScript(message.tabId);\n          sendResponse({ success: true });\n          break;\n\n        case 'PREPARE_PAGE_FOR_CAPTURE':\n          await this.preparePageForCapture(message.tabId, message.options);\n          sendResponse({ success: true });\n          break;\n\n        default:\n          sendResponse({ success: false, error: 'Unknown message type' });\n      }\n    } catch (error) {\n      console.error('メッセージ処理エラー:', error);\n      sendResponse({ success: false, error: (error as Error).message });\n    }\n  }\n\n  // 特定のタブからスクリーンショット撮影\n  private async captureScreenshotFromTab(tabId: number, options: any = {}): Promise<any> {\n    try {\n      const tab = await chrome.tabs.get(tabId);\n      \n      if (!tab) {\n        throw new Error('タブが見つかりません');\n      }\n\n      // タブをアクティブにする\n      await chrome.tabs.update(tabId, { active: true });\n      \n      // 少し待機\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // ページの準備（オプション）\n      if (options.prepareCapture) {\n        await this.preparePageForCapture(tabId, options);\n      }\n\n      // スクリーンショット撮影の設定\n      const captureOptions: chrome.tabs.CaptureVisibleTabOptions = {\n        format: 'png',\n        quality: this.getImageQuality(options.imageQuality)\n      };\n\n      // スクリーンショットを撮影\n      const dataUrl = await new Promise<string>((resolve, reject) => {\n        chrome.tabs.captureVisibleTab(tab.windowId!, captureOptions, (dataUrl) => {\n          if (chrome.runtime.lastError) {\n            reject(new Error(chrome.runtime.lastError.message));\n          } else if (dataUrl) {\n            resolve(dataUrl);\n          } else {\n            reject(new Error('スクリーンショットの撮影に失敗しました'));\n          }\n        });\n      });\n\n      return {\n        dataUrl: dataUrl,\n        timestamp: Date.now(),\n        tabInfo: {\n          id: tab.id,\n          url: tab.url,\n          title: tab.title\n        }\n      };\n    } catch (error) {\n      console.error('タブスクリーンショット撮影エラー:', error);\n      throw error;\n    }\n  }\n\n  // スクリーンショット撮影\n  private async captureScreenshot(options: any = {}): Promise<any> {\n    try {\n      // アクティブなタブを取得\n      const [activeTab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      \n      if (!activeTab || !activeTab.id) {\n        throw new Error('アクティブなタブが見つかりません');\n      }\n\n      return await this.captureScreenshotFromTab(activeTab.id, options);\n    } catch (error) {\n      console.error('スクリーンショット撮影エラー:', error);\n      throw error;\n    }\n  }\n\n  // 画像品質の設定を数値に変換\n  private getImageQuality(qualitySetting: string): number {\n    switch (qualitySetting) {\n      case 'high': return 100;\n      case 'medium': return 80;\n      case 'low': return 60;\n      default: return 80;\n    }\n  }\n\n  // タブ情報の取得\n  private async getTabInfo(tabId: number): Promise<any> {\n    try {\n      const tab = await chrome.tabs.get(tabId);\n      return {\n        id: tab.id,\n        url: tab.url,\n        title: tab.title,\n        favIconUrl: tab.favIconUrl,\n        status: tab.status\n      };\n    } catch (error) {\n      console.error('タブ情報取得エラー:', error);\n      throw error;\n    }\n  }\n\n  // コンテンツスクリプトの注入\n  private async injectContentScript(tabId: number): Promise<void> {\n    try {\n      await chrome.scripting.executeScript({\n        target: { tabId: tabId },\n        files: ['content.js']\n      });\n    } catch (error) {\n      console.error('コンテンツスクリプト注入エラー:', error);\n      throw error;\n    }\n  }\n\n  // ページのキャプチャ準備\n  private async preparePageForCapture(tabId: number, options: any): Promise<void> {\n    try {\n      // コンテンツスクリプトにメッセージを送信\n      await chrome.tabs.sendMessage(tabId, {\n        type: 'PREPARE_FOR_CAPTURE',\n        options: options\n      });\n\n      // 準備のための遅延\n      if (options.captureDelay && options.captureDelay > 0) {\n        await new Promise(resolve => setTimeout(resolve, options.captureDelay * 1000));\n      }\n    } catch (error) {\n      console.error('ページ準備エラー:', error);\n      // エラーがあっても続行（コンテンツスクリプトがない場合など）\n    }\n  }\n\n  // タブ更新時の処理\n  private handleTabUpdate(tabId: number, tab: chrome.tabs.Tab): void {\n    // 必要に応じてタブ更新時の処理を追加\n    // 例：特定のページでの自動キャプチャなど\n  }\n\n  // コンテキストメニューの作成\n  private createContextMenus(): void {\n    try {\n      // コンテキストメニューをクリア\n      chrome.contextMenus.removeAll(() => {\n        // メインメニュー\n        chrome.contextMenus.create({\n          id: 'quick-vrt-main',\n          title: 'Quick VRT',\n          contexts: ['page']\n        });\n\n        // サブメニュー\n        chrome.contextMenus.create({\n          id: 'quick-vrt-capture-before',\n          parentId: 'quick-vrt-main',\n          title: 'Beforeスクリーンショットを撮影',\n          contexts: ['page']\n        });\n\n        chrome.contextMenus.create({\n          id: 'quick-vrt-capture-after',\n          parentId: 'quick-vrt-main',\n          title: 'Afterスクリーンショットを撮影',\n          contexts: ['page']\n        });\n\n        chrome.contextMenus.create({\n          id: 'quick-vrt-separator',\n          parentId: 'quick-vrt-main',\n          type: 'separator',\n          contexts: ['page']\n        });\n\n        chrome.contextMenus.create({\n          id: 'quick-vrt-open-tab',\n          parentId: 'quick-vrt-main',\n          title: 'VRTツールをタブで開く',\n          contexts: ['page']\n        });\n      });\n    } catch (error) {\n      console.error('コンテキストメニュー作成エラー:', error);\n    }\n  }\n\n  // コンテキストメニュークリック処理\n  private async handleContextMenuClick(info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab | undefined): Promise<void> {\n    try {\n      if (!tab) return;\n\n      switch (info.menuItemId) {\n        case 'quick-vrt-capture-before':\n          await this.handleQuickCapture('before', tab);\n          break;\n\n        case 'quick-vrt-capture-after':\n          await this.handleQuickCapture('after', tab);\n          break;\n\n        case 'quick-vrt-open-tab':\n          await this.openExtensionInTab();\n          break;\n      }\n    } catch (error) {\n      console.error('コンテキストメニュー処理エラー:', error);\n    }\n  }\n\n  // クイックキャプチャ処理\n  private async handleQuickCapture(type: 'before' | 'after', tab: chrome.tabs.Tab): Promise<void> {\n    try {\n      const screenshot = await this.captureScreenshotFromTab(tab.id!, {});\n      \n      // キャプチャしたデータを一時保存\n      if (type === 'before') {\n        this.capturedData.before = screenshot;\n      } else {\n        this.capturedData.after = screenshot;\n      }\n\n      // 通知を表示\n      chrome.notifications.create({\n        type: 'basic',\n        iconUrl: 'icons/icon48.png',\n        title: 'Quick VRT',\n        message: `${type}スクリーンショットを撮影しました`\n      });\n\n    } catch (error) {\n      console.error(`${type}キャプチャエラー:`, error);\n      chrome.notifications.create({\n        type: 'basic',\n        iconUrl: 'icons/icon48.png',\n        title: 'Quick VRT - エラー',\n        message: `${type}スクリーンショットの撮影に失敗しました`\n      });\n    }\n  }\n\n  // 定期的なクリーンアップ処理\n  private async performMaintenance(): Promise<void> {\n    try {\n      const result = await chrome.storage.local.get(['vrtHistory']);\n      \n      // 履歴の制限（最新50件まで）\n      if (result.vrtHistory && result.vrtHistory.length > 50) {\n        const trimmedHistory = result.vrtHistory.slice(0, 50);\n        await chrome.storage.local.set({ vrtHistory: trimmedHistory });\n      }\n\n      // 一時キャプチャデータをクリア（1時間以上前のもの）\n      this.capturedData = {};\n\n    } catch (error) {\n      console.error('メンテナンス処理エラー:', error);\n    }\n  }\n}\n\n// Background scriptの初期化\nconst quickVRTBackground = new QuickVRTBackground();\n\n// 定期的なメンテナンス（1日1回）\nchrome.alarms.create('maintenance', { periodInMinutes: 24 * 60 });\nchrome.alarms.onAlarm.addListener((alarm) => {\n  if (alarm.name === 'maintenance') {\n    (quickVRTBackground as any).performMaintenance();\n  }\n});"
  ],
  "mappings": "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",
  "debugId": "E8B6623087D12C0F64756E2164756E21",
  "names": []
}